/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package admin;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import model.BoPhim;
import model.BoPhimManager;
import panels.ItemPhimAdmin;
import services.MySql;
import view.TrangChu;

/**
 *
 * @author tranv
 */
public class QuanLyPhim extends javax.swing.JFrame {

    public static BoPhimManager boPhimManager;

    public QuanLyPhim() {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);//chế độ đóng (chỉ đóng màn hình hiện tại)
        setSize(1000, 500);
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(10);

        //thêm sự kiện đóng màn hình
        ktaoSuKienDongFrame();

        //lấy danh sách phim
        layDSPhim();
    }

    public static void layDSPhim() {
            
        try {
            String query = "SELECT * FROM BoPhim";
            ResultSet kqTruyVan = MySql.queryData(query);

            // xử lý khi có kết quả trả về
            ArrayList<BoPhim> dsPhim = new ArrayList<>();
            while (kqTruyVan != null && kqTruyVan.next()) {
                //thêm phim vào danh sách
                BoPhim bp = BoPhim.chuyenDoi_ResultSet(kqTruyVan);
                dsPhim.add(bp);
            }
            //thêm danh sách bộ phim vào boPhimManager
            boPhimManager = new BoPhimManager(dsPhim);

            //Hiện danh sách phim lên giao diện
            hienDsPhim();
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyPhim.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void hienDsPhim() {
        pnDSPhim.removeAll();//xóa hết danh sách
        ArrayList<BoPhim> dsPhim = boPhimManager.getDsBoPhim();
        for (BoPhim item : dsPhim) {
            JPanel pnPhim = new ItemPhimAdmin(item);
            pnDSPhim.add(pnPhim);
        }
        pnDSPhim.revalidate();
        pnDSPhim.repaint(); //reload lại giao diện
    }

    public void ktaoSuKienDongFrame() {
        // sự kiện khi đóng màn hinh
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // mở màn hình trang chủ
                System.out.println("mo");
                TrangChu manHinhTrangChu = new TrangChu();
                manHinhTrangChu.setLocationRelativeTo(null);
                manHinhTrangChu.setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfTimKiem = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnDSPhim = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Quản lý phim");

        tfTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfTimKiemActionPerformed(evt);
            }
        });

        btnTimKiem.setText("Tìm");
        btnTimKiem.setFocusPainted(false);
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        btnThem.setText("Thêm");
        btnThem.setFocusPainted(false);
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);

        pnDSPhim.setLayout(new javax.swing.BoxLayout(pnDSPhim, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(pnDSPhim);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(tfTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTimKiem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 170, Short.MAX_VALUE)
                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimKiem)
                    .addComponent(btnThem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        moManHinhThemBoPhim();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        // TODO add your handling code here:
        xuLyTimKiem();
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void tfTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfTimKiemActionPerformed
        // TODO add your handling code here:
        xuLyTimKiem();
    }//GEN-LAST:event_tfTimKiemActionPerformed

    public void xuLyTimKiem() {
        try {
            String tuKhoaTimKiem = tfTimKiem.getText();

            String query = "SELECT * FROM BoPhim WHERE TenPhim like '%" + tuKhoaTimKiem + "%'";
            ResultSet kqTruyVan = MySql.queryData(query);

            // xử lý khi có kết quả trả về
            ArrayList<BoPhim> dsPhim = new ArrayList<>();
            while (kqTruyVan != null && kqTruyVan.next()) {
                //thêm phim vào danh sách
                BoPhim bp = BoPhim.chuyenDoi_ResultSet(kqTruyVan);
                dsPhim.add(bp);
            }
            //
            boPhimManager = new BoPhimManager(dsPhim);

            //Hiện danh sách phim lên giao diện
            hienDsPhim();

        } catch (SQLException ex) {
            Logger.getLogger(QuanLyPhim.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void moManHinhThemBoPhim() {
        //mở màn hình thêm bộ phim
        ThemBoPhim manHinhThemBoPhim = new ThemBoPhim();
        manHinhThemBoPhim.setVisible(true); // cho hiển thị lên
        manHinhThemBoPhim.setLocationRelativeTo(null); // cho nằm giữa màn hình

        // thêm sự kiện khi đóng màn hình thêm bộ phim
        manHinhThemBoPhim.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // hiện màn hình hiện tại
                setVisible(true);
                layDSPhim();
            }
        });

        // ẩn màn hình hiện tại
        setVisible(false);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JPanel pnDSPhim;
    private javax.swing.JTextField tfTimKiem;
    // End of variables declaration//GEN-END:variables
}
